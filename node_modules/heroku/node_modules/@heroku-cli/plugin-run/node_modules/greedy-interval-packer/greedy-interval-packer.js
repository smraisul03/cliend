/*!
 * Copyright Â© 2015, One.com
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE. */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var o;"undefined"!=typeof window?o=window:"undefined"!=typeof global?o=global:"undefined"!=typeof self&&(o=self);var n=o;n=n.com||(n.com={}),n=n.one||(n.one={}),n.greedyIntervalPacker=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function (a, b) {
    var c = b.start - a.start;
    if (c !== 0) { return c; }
    return (a.end - a.start) - (b.end - b.start);
};

},{}],2:[function(require,module,exports){
var intersectsWithSome = require(3).intersectsWithSome;
var byDescStartAndLength = require(1);

module.exports = function greedyIntervalPacker(intervals, options) {
    options = options || {};

    if (!Array.isArray(intervals)) {
        throw new Error('The interval packer requires an array of objects with start and end properties.');
    }

    if (intervals.length === 0) {
        return [];
    }

    intervals.forEach(function (interval) {
        if (
            typeof interval !== 'object' ||
            typeof interval.start !== 'number' ||
            typeof interval.end !== 'number' ||
            interval.end <= interval.start
        ) {
            throw new Error('Intervals must be objects with integer properties start and end where start < end.');
        }
    });

    intervals = [].concat(intervals).sort(byDescStartAndLength);

    var currentPartition;
    var partitions = [];
    var currentPartitionEnd = -Infinity;

    while (intervals.length > 0) {
        var interval = intervals.pop();

        if (currentPartitionEnd <= interval.start) {
            currentPartition = [[]];
            partitions.push(currentPartition);
        }

        var i = 0;

        while (
            i < currentPartition.length &&
            intersectsWithSome(currentPartition[i], interval)
        ) {
            i += 1;
        }
        (currentPartition[i] = currentPartition[i] || []).push(interval);
        currentPartitionEnd = Math.max(currentPartitionEnd, interval.end);
    }

    if (!options.groupPartitions) {
        return partitions.reduce(function (result, partition) {
            partition.forEach(function (partitionGroup, i) {
                result[i] = result[i] || [];
                Array.prototype.push.apply(result[i], partitionGroup);
                return result;
            });
            return result;
        }, []);
    } else {
        return partitions;
    }
};

},{}],3:[function(require,module,exports){
var intersection = {
    intersects: function intersects(x, y) {
        return (x.start < y.end && y.start < x.end) || x.start === y.start;
    },

    intersectsWithSome: function intersectsWithSome(intervals, interval) {
        function intersectWithInterval(other) {
            return intersection.intersects(interval, other);
        }
        return intervals.some(intersectWithInterval);
    }
};

module.exports = intersection;

},{}]},{},[2])(2)
});