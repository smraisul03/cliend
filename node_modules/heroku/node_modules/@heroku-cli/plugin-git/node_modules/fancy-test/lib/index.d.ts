import { expect } from './chai';
import * as FancyTypes from './types';
export declare const fancy: FancyTypes.Base<FancyTypes.Context, {
    skip: {
        output: {};
        a1: {};
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    only: {
        output: {};
        a1: {};
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    retries: {
        output: {};
        a1: number;
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    catch: {
        output: {
            error: Error;
        };
        a1: string | RegExp | ((err: Error) => any);
        a2: {
            raiseIfNotThrown?: boolean | undefined;
        };
        a3: {};
        a4: {};
    };
} & {
    env: {
        output: {};
        a1: {
            [k: string]: string | null | undefined;
        };
        a2: FancyTypes.EnvOptions;
        a3: {};
        a4: {};
    };
} & {
    stub: {
        output: {
            stubs: any[];
        };
        a1: any;
        a2: string;
        a3: any;
        a4: {};
    };
} & {
    stdin: {
        output: {};
        a1: string;
        a2: number;
        a3: {};
        a4: {};
    };
} & {
    stderr: {
        output: {
            readonly stderr: string;
        };
        a1: {
            print?: boolean | undefined;
            stripColor?: boolean | undefined;
        };
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    stdout: {
        output: {
            readonly stdout: string;
        };
        a1: {
            print?: boolean | undefined;
            stripColor?: boolean | undefined;
        };
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    nock: {
        output: {
            error?: Error | undefined;
            nock: number;
        };
        a1: string;
        a2: FancyTypes.NockOptions | FancyTypes.NockCallback;
        a3: FancyTypes.NockCallback;
        a4: {};
    };
}>;
export declare type Fancy = typeof fancy;
export { expect, FancyTypes, };
export default fancy;
